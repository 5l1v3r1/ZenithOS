U0 MovQ()
{
		MOV		RBX, 30
		DU8		0x66, 0x48, 0x0F, 0x6E, 0xC3; //MOVQ	XMM0, RBX
		DU8		0x66, 0x48, 0x0F, 0x7E, 0xC0; //MOVQ	RAX, XMM0

		"%d\n", GetRAX;
}

MovQ;

asm {

//		ALIGN 16
DATA1:	DU64	0xFFFFFFFF00000000, 0x00000000FFFFFFFF;
DATA2:	DU64	0x00000000FFFFFFFF, 0xFFFFFFFF00000000;

_POR_TEST::
		DU8		0xF3, 0x0F, 0x6F, 0x04, 0x25; //MOVDQU XMM0, [DATA1]
		DU32	DATA1;
		DU8		0xF3, 0x0F, 0x6F, 0x0C, 0x25; //MOVDQU XMM1, [DATA2]
		DU32	DATA2;
		DU8		0x66, 0x0F, 0xEB, 0xC1;		  //POR XMM0, XMM1
		DU8		0x66, 0x48, 0x0F, 0x7E, 0xC0; //MOVQ RAX, XMM0
		DU8		0x66, 0x48, 0x0F, 0x3A, 0x16, 0xC3, 0x01;	//PEXTRQ RBX, XMM0, 1

		CALL	PUT_HEX_U64
		MOV		RAX, ' ';
		CALL	PUT_CHARS
		MOV		RAX, RBX
		CALL	PUT_HEX_U64
		MOV		RAX, '\n'
		CALL	PUT_CHARS
		RET
}

Call(_POR_TEST);